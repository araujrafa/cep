{"version":3,"sources":["components/button/button.styles.js","components/button/button.component.js","components/container/container.styles.js","components/container/container.component.js","components/input/input.styles.js","components/input/input.component.js","components/map/map.styles.js","components/map/map.component.js","components/modal/modal.styles.js","components/modal/modal.component.js","components/text/text.style.js","components/text/text.component.js","components/title/title.style.js","components/title/title.component.js","pages/app.style.js","pages/app.js","serviceWorker.js","index.js"],"names":["Button","styled","button","primary","ButtonComponent","props","children","Container","div","gray","ContainerComponent","Input","MaskedInput","InputComponent","Map","iframe","MapComponent","cep","marginWidth","marginHeight","frameBorder","scrolling","src","allowFullScreen","Modal","show","Close","a","ModalComponent","handleClose","onClick","Text","p","TextComponent","Title","h1","small","TitleComponent","App","Form","AppPage","useState","setShow","setCep","mask","name","value","onChange","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"waAEA,IAWeA,EAXAC,IAAOC,OAAV,KACU,qBAAGC,SAAyB,aAGvC,qBAAGA,SAAyB,UCKxBC,EARS,SAACC,GAAD,OACtB,kBAAC,EACKA,EAEHA,EAAMC,W,2JCLX,IAOeC,EAPGN,IAAOO,IAAV,KACO,qBAAGC,MAAmB,aCI7BC,EAJY,SAACL,GAAD,OACzB,kBAAC,EAAcA,EAAQA,EAAMC,W,sHCD/B,IAKeK,EALDV,YAAOW,IAAPX,CAAH,KCMIY,EANQ,SAACR,GAAD,OACrB,kBAAC,EACKA,I,0XCHR,IAAMS,EAAMb,IAAOc,OAAV,KAWTD,EAAIP,UAAYN,IAAOO,IAAvB,KASeM,QCNAE,EAbM,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,OACnB,kBAAC,EAAIV,UAAL,KACE,kBAAC,EAAD,CACEW,YAAY,IACZC,aAAa,IACbC,YAAY,IACZC,UAAU,OACVC,IAAG,2CAAsCL,EAAtC,2BACHM,iBAAe,M,6NCRrB,IAAMC,EAAQvB,YAAOM,EAAPN,CAAH,KACE,qBAAGwB,MAAoB,UAGpCD,EAAME,MAAQzB,IAAO0B,EAArB,KAMeH,QCAAI,EAVQ,SAAC,GAAD,IAAGH,EAAH,EAAGA,KAAMI,EAAT,EAASA,YAAavB,EAAtB,EAAsBA,SAAtB,OACrB,kBAAC,EAAD,CAAOmB,KAAMA,GACX,kBAAC,EAAMC,MAAP,CACEI,QAASD,GADX,MAICvB,I,iICPL,IAMeyB,EANF9B,IAAO+B,EAAV,KACC,qBAAGvB,MAAmB,aCMlBwB,EANO,SAAC5B,GAAD,OACpB,kBAAC,EAASA,EACPA,EAAMC,W,sICHX,IAMe4B,EANDjC,IAAOkC,GAAV,KAGI,qBAAGC,MAAoB,OAAQ,UCE/BC,EAJQ,SAAChC,GAAD,OACrB,kBAAC,EAAUA,EAAQA,EAAMC,W,0OCF3B,IAAMgC,EAAMrC,IAAOO,IAAV,KAET8B,EAAIC,KAAOtC,IAAOO,IAAlB,KAOe8B,QCoCAE,EAnCC,WAAO,IAAD,EACIC,oBAAS,GADb,mBACbhB,EADa,KACPiB,EADO,OAEED,mBAAS,IAFX,mBAEbxB,EAFa,KAER0B,EAFQ,KAQpB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAWlC,MAAI,GACb,kBAAC,EAAD,CAAO2B,OAAK,GAAZ,aACA,kBAAC,EAAIG,KAAL,KACE,kBAAC,EAAD,CAAM9B,MAAI,GAAV,OACA,kBAAC,EAAD,CACEmC,KAAK,YACLC,KAAK,MACLC,MAAO7B,EACP8B,SAAUJ,EACVK,KAAK,SAEP,kBAAC,EAAD,CAAQ7C,SAAO,GAAf,YAGJ,kBAAC,EAAD,CAAOsB,KAAMA,EAAMI,YAAa,kBAAMa,GAAQ,KAC5C,kBAAC,EAAD,0BACA,kBAAC,EAAD,uBACA,kBAAC,EAAD,0BACA,kBAAC,EAAD,kBACA,kBAAC,EAAD,CAAKzB,IAAI,iBC7BGgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b7fe2bb4.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Button = styled.button`\n  background-color: ${({ primary }) => primary && '#50a5de'};\n  border: 0;\n  border-radius: 2px;\n  color: ${({ primary }) => primary && '#fff'};\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: bold;\n  padding: 5px 15px;\n`;\n\nexport default Button;","import React from 'react';\nimport Button from './button.styles';\n\nconst ButtonComponent = (props) => (\n  <Button\n    {...props}\n  >\n    {props.children}\n  </Button>\n);\n\nexport default ButtonComponent;","import styled from 'styled-components';\n\nconst Container = styled.div`\n  background-color: ${({ gray }) => gray && '#ededed'};\n  padding: 20px;\n  margin: 0 auto;\n  max-width: 600px;\n`;\n\nexport default Container;","import React from 'react';\nimport Container from './container.styles';\n\nconst ContainerComponent = (props) => (\n  <Container {...props}>{props.children}</Container>\n) \n\nexport default ContainerComponent;","import MaskedInput from 'react-maskedinput';\nimport styled from 'styled-components';\n\nconst Input = styled(MaskedInput)`\n  color: #9b9b9b;\n  font-size: 14px;\n`;\n\nexport default Input;","import React from 'react';\nimport Input from './input.styles';\n\nconst InputComponent = (props) => (\n  <Input\n    {...props}\n  />\n);\n\nexport default InputComponent","import styled from 'styled-components';\n\nconst Map = styled.iframe`\n  position: absolute;\n  border: 0;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 100%;\n  width: 100%;\n`;\n\nMap.Container = styled.div`\n  position: relative;\n  display: block;\n  width: 100%;\n  min-height: 300px;\n  padding: 0;\n  overflow: hidden;\n`;\n\nexport default Map;","import React from 'react';\nimport Map from './map.styles';\n\nconst MapComponent = ({ cep }) => (\n  <Map.Container>\n    <Map\n      marginWidth=\"0\"\n      marginHeight=\"0\" \n      frameBorder=\"0\" \n      scrolling=\"auto\"\n      src={`https://www.google.com.br/maps?q=${cep},%20Brasil&output=embed`} \n      allowFullScreen\n    />\n  </Map.Container>\n);\n\nexport default MapComponent;\n","import styled from 'styled-components';\nimport Container from '../container/container.component';\n\nconst Modal = styled(Container)`\n  display: ${({ show }) => !show && 'none'};\n`;\n\nModal.Close = styled.a`\n  cursor: pointer;\n  float: right;\n  font-family: 'Arial';\n`;\n\nexport default Modal;","import React from 'react';\nimport Modal from './modal.styles';\n\nconst ModalComponent = ({ show, handleClose, children }) => (\n  <Modal show={show}>\n    <Modal.Close\n      onClick={handleClose}\n    > x\n    </Modal.Close>\n    {children}\n  </Modal>\n)\n\nexport default ModalComponent;","import styled from 'styled-components';\n\nconst Text = styled.p`\n  color: ${({ gray }) => gray && '#9b9b9b'};\n  font-family: Arial;\n  font-size: 14px;\n`\n\nexport default Text;\n","import React from 'react';\nimport Text from './text.style';\n\nconst TextComponent = (props) => (\n  <Text {...props}>\n    {props.children}\n  </Text>\n)\n\nexport default TextComponent;","import styled from 'styled-components';\n\nconst Title = styled.h1`\n  font-family: Arial;\n  font-weight: bold;\n  font-size: ${({ small }) => small ? '14px': '24px'}\n`;\n\nexport default Title;","import React from 'react';\nimport Title from './title.style';\n\nconst TitleComponent = (props) => (\n  <Title {...props}>{props.children}</Title>\n);\n\nexport default TitleComponent;","import styled from 'styled-components';\n\nconst App = styled.div``;\n\nApp.Form = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 200px;\n`;\n\nexport default App;","import React, { useState } from 'react';\nimport {\n  Button,\n  Container,\n  Input,\n  Map,\n  Modal,\n  Title,\n  Text,\n} from '../components'\nimport App from './app.style';\n\nconst AppPage = () => {\n  const [show, setShow] = useState(false);\n  const [cep, setCep] = useState('');\n\n  const onSearch = (e) => {\n    e.prevantDefault();\n  }\n\n  return (\n    <App>\n      <Container gray>\n        <Title small>Consultar</Title>\n        <App.Form>\n          <Text gray>CEP</Text>\n          <Input\n            mask=\"11111-111\"\n            name=\"cep\"\n            value={cep}\n            onChange={setCep}\n            type=\"text\"\n          />\n          <Button primary>Buscar</Button>\n        </App.Form>\n      </Container>\n      <Modal show={show} handleClose={() => setShow(false)}>\n        <Title>Rua Miguel Mentem</Title>\n        <Text>Vila Guilherme</Text>\n        <Text>SÃ£o Paulo - SP</Text>\n        <Text>02050-010</Text>\n        <Map cep=\"08430-180\" />\n      </Modal>\n    </App>\n  )\n}\n\nexport default AppPage;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './pages/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}